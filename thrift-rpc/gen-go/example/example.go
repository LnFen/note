// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package example

import (
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Name
//  - Sex
//  - ClassName
//  - Age
//  - UID
type Student struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Sex string `thrift:"sex,2" db:"sex" json:"sex"`
  ClassName string `thrift:"className,3" db:"className" json:"className"`
  Age int32 `thrift:"age,4" db:"age" json:"age"`
  UID string `thrift:"uid,5" db:"uid" json:"uid"`
}

func NewStudent() *Student {
  return &Student{}
}


func (p *Student) GetName() string {
  return p.Name
}

func (p *Student) GetSex() string {
  return p.Sex
}

func (p *Student) GetClassName() string {
  return p.ClassName
}

func (p *Student) GetAge() int32 {
  return p.Age
}

func (p *Student) GetUID() string {
  return p.UID
}
func (p *Student) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Student)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Student)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Sex = v
}
  return nil
}

func (p *Student)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ClassName = v
}
  return nil
}

func (p *Student)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Age = v
}
  return nil
}

func (p *Student)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *Student) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Student"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Student) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *Student) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sex", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sex: ", p), err) }
  if err := oprot.WriteString(string(p.Sex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sex (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sex: ", p), err) }
  return err
}

func (p *Student) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("className", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:className: ", p), err) }
  if err := oprot.WriteString(string(p.ClassName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.className (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:className: ", p), err) }
  return err
}

func (p *Student) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("age", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:age: ", p), err) }
  if err := oprot.WriteI32(int32(p.Age)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.age (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:age: ", p), err) }
  return err
}

func (p *Student) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:uid: ", p), err) }
  if err := oprot.WriteString(string(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:uid: ", p), err) }
  return err
}

func (p *Student) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Student(%+v)", *p)
}

// Attributes:
//  - Name
//  - Sex
//  - ClassName
//  - Age
type FormStudent struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Sex string `thrift:"sex,2" db:"sex" json:"sex"`
  ClassName string `thrift:"className,3" db:"className" json:"className"`
  Age int32 `thrift:"age,4" db:"age" json:"age"`
}

func NewFormStudent() *FormStudent {
  return &FormStudent{}
}


func (p *FormStudent) GetName() string {
  return p.Name
}

func (p *FormStudent) GetSex() string {
  return p.Sex
}

func (p *FormStudent) GetClassName() string {
  return p.ClassName
}

func (p *FormStudent) GetAge() int32 {
  return p.Age
}
func (p *FormStudent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FormStudent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *FormStudent)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Sex = v
}
  return nil
}

func (p *FormStudent)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ClassName = v
}
  return nil
}

func (p *FormStudent)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Age = v
}
  return nil
}

func (p *FormStudent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FormStudent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FormStudent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *FormStudent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sex", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sex: ", p), err) }
  if err := oprot.WriteString(string(p.Sex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sex (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sex: ", p), err) }
  return err
}

func (p *FormStudent) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("className", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:className: ", p), err) }
  if err := oprot.WriteString(string(p.ClassName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.className (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:className: ", p), err) }
  return err
}

func (p *FormStudent) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("age", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:age: ", p), err) }
  if err := oprot.WriteI32(int32(p.Age)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.age (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:age: ", p), err) }
  return err
}

func (p *FormStudent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FormStudent(%+v)", *p)
}

type BaseService interface {
  // Parameters:
  //  - UID
  GetStudentByUID(ctx context.Context, uid string) (r *Student, err error)
  // Parameters:
  //  - UID
  //  - Form
  ModifyStudent(ctx context.Context, uid string, form *FormStudent) (r *Student, err error)
}

type BaseServiceClient struct {
  c thrift.TClient
}

func NewBaseServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BaseServiceClient {
  return &BaseServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewBaseServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BaseServiceClient {
  return &BaseServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewBaseServiceClient(c thrift.TClient) *BaseServiceClient {
  return &BaseServiceClient{
    c: c,
  }
}

func (p *BaseServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - UID
func (p *BaseServiceClient) GetStudentByUID(ctx context.Context, uid string) (r *Student, err error) {
  var _args0 BaseServiceGetStudentByUIDArgs
  _args0.UID = uid
  var _result1 BaseServiceGetStudentByUIDResult
  if err = p.Client_().Call(ctx, "getStudentByUID", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - UID
//  - Form
func (p *BaseServiceClient) ModifyStudent(ctx context.Context, uid string, form *FormStudent) (r *Student, err error) {
  var _args2 BaseServiceModifyStudentArgs
  _args2.UID = uid
  _args2.Form = form
  var _result3 BaseServiceModifyStudentResult
  if err = p.Client_().Call(ctx, "modifyStudent", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

type BaseServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler BaseService
}

func (p *BaseServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *BaseServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *BaseServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewBaseServiceProcessor(handler BaseService) *BaseServiceProcessor {

  self4 := &BaseServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["getStudentByUID"] = &baseServiceProcessorGetStudentByUID{handler:handler}
  self4.processorMap["modifyStudent"] = &baseServiceProcessorModifyStudent{handler:handler}
return self4
}

func (p *BaseServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x5

}

type baseServiceProcessorGetStudentByUID struct {
  handler BaseService
}

func (p *baseServiceProcessorGetStudentByUID) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BaseServiceGetStudentByUIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getStudentByUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BaseServiceGetStudentByUIDResult{}
var retval *Student
  var err2 error
  if retval, err2 = p.handler.GetStudentByUID(ctx, args.UID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getStudentByUID: " + err2.Error())
    oprot.WriteMessageBegin("getStudentByUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getStudentByUID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type baseServiceProcessorModifyStudent struct {
  handler BaseService
}

func (p *baseServiceProcessorModifyStudent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BaseServiceModifyStudentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("modifyStudent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BaseServiceModifyStudentResult{}
var retval *Student
  var err2 error
  if retval, err2 = p.handler.ModifyStudent(ctx, args.UID, args.Form); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing modifyStudent: " + err2.Error())
    oprot.WriteMessageBegin("modifyStudent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("modifyStudent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - UID
type BaseServiceGetStudentByUIDArgs struct {
  UID string `thrift:"uid,1" db:"uid" json:"uid"`
}

func NewBaseServiceGetStudentByUIDArgs() *BaseServiceGetStudentByUIDArgs {
  return &BaseServiceGetStudentByUIDArgs{}
}


func (p *BaseServiceGetStudentByUIDArgs) GetUID() string {
  return p.UID
}
func (p *BaseServiceGetStudentByUIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BaseServiceGetStudentByUIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *BaseServiceGetStudentByUIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getStudentByUID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseServiceGetStudentByUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteString(string(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *BaseServiceGetStudentByUIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseServiceGetStudentByUIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BaseServiceGetStudentByUIDResult struct {
  Success *Student `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBaseServiceGetStudentByUIDResult() *BaseServiceGetStudentByUIDResult {
  return &BaseServiceGetStudentByUIDResult{}
}

var BaseServiceGetStudentByUIDResult_Success_DEFAULT *Student
func (p *BaseServiceGetStudentByUIDResult) GetSuccess() *Student {
  if !p.IsSetSuccess() {
    return BaseServiceGetStudentByUIDResult_Success_DEFAULT
  }
return p.Success
}
func (p *BaseServiceGetStudentByUIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BaseServiceGetStudentByUIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BaseServiceGetStudentByUIDResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Student{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BaseServiceGetStudentByUIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getStudentByUID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseServiceGetStudentByUIDResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BaseServiceGetStudentByUIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseServiceGetStudentByUIDResult(%+v)", *p)
}

// Attributes:
//  - UID
//  - Form
type BaseServiceModifyStudentArgs struct {
  UID string `thrift:"uid,1" db:"uid" json:"uid"`
  Form *FormStudent `thrift:"form,2" db:"form" json:"form"`
}

func NewBaseServiceModifyStudentArgs() *BaseServiceModifyStudentArgs {
  return &BaseServiceModifyStudentArgs{}
}


func (p *BaseServiceModifyStudentArgs) GetUID() string {
  return p.UID
}
var BaseServiceModifyStudentArgs_Form_DEFAULT *FormStudent
func (p *BaseServiceModifyStudentArgs) GetForm() *FormStudent {
  if !p.IsSetForm() {
    return BaseServiceModifyStudentArgs_Form_DEFAULT
  }
return p.Form
}
func (p *BaseServiceModifyStudentArgs) IsSetForm() bool {
  return p.Form != nil
}

func (p *BaseServiceModifyStudentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BaseServiceModifyStudentArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *BaseServiceModifyStudentArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Form = &FormStudent{}
  if err := p.Form.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Form), err)
  }
  return nil
}

func (p *BaseServiceModifyStudentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("modifyStudent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseServiceModifyStudentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteString(string(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *BaseServiceModifyStudentArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("form", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:form: ", p), err) }
  if err := p.Form.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Form), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:form: ", p), err) }
  return err
}

func (p *BaseServiceModifyStudentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseServiceModifyStudentArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BaseServiceModifyStudentResult struct {
  Success *Student `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBaseServiceModifyStudentResult() *BaseServiceModifyStudentResult {
  return &BaseServiceModifyStudentResult{}
}

var BaseServiceModifyStudentResult_Success_DEFAULT *Student
func (p *BaseServiceModifyStudentResult) GetSuccess() *Student {
  if !p.IsSetSuccess() {
    return BaseServiceModifyStudentResult_Success_DEFAULT
  }
return p.Success
}
func (p *BaseServiceModifyStudentResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BaseServiceModifyStudentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BaseServiceModifyStudentResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Student{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BaseServiceModifyStudentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("modifyStudent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseServiceModifyStudentResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BaseServiceModifyStudentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseServiceModifyStudentResult(%+v)", *p)
}


